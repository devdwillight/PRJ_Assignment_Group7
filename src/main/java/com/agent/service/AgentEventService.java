/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.agent.service;

import com.agent.model.Action;
import static com.agent.service.ScheduleAIAgent.tryParseActions;
import com.dao.Calendar.CalendarDAO;
import com.dao.Reminder.EmailReminderDAO;
import com.model.Calendar;
import com.model.User;
import com.model.UserEvents;
import com.service.Event.EventService;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.EntityTransaction;
import jakarta.persistence.Persistence;
import jakarta.persistence.TypedQuery;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Admin
 */
public class AgentEventService {

    private final EntityManagerFactory emf = Persistence.createEntityManagerFactory("CLDPU");

    public void saveEventFromAction(Action action, Calendar calendar) {
        EntityManager em = emf.createEntityManager();
        EntityTransaction tx = em.getTransaction();

        try {
            tx.begin();

            Map<String, Object> args = action.getArgs();

            UserEvents event = new UserEvents();
            event.setName((String) args.get("title"));
            event.setDescription((String) args.getOrDefault("description", ""));
            event.setLocation((String) args.getOrDefault("location", ""));
            event.setStartDate(Timestamp.valueOf((String) args.get("start_time")));
            event.setDueDate(Timestamp.valueOf((String) args.get("end_time")));
            event.setIsAllDay((Boolean) args.getOrDefault("is_all_day", false));
            event.setIsRecurring((Boolean) args.getOrDefault("is_recurring", false));
            event.setRecurrenceRule((String) args.getOrDefault("recurrence_rule", null));
            event.setColor((String) args.getOrDefault("color", "#2196f3"));
            event.setRemindMethod((Boolean) args.getOrDefault("remind_method", true));
            event.setRemindBefore((Integer) args.getOrDefault("remind_before", 30));
            event.setRemindUnit((String) args.getOrDefault("remind_unit", "minutes"));
            event.setCreatedAt(new Date());
            event.setUpdatedAt(new Date());
            event.setIdCalendar(calendar);

            em.persist(event);
            tx.commit();

        } catch (Exception e) {
            e.printStackTrace();
            if (tx.isActive()) {
                tx.rollback();
            }
        } finally {
            em.close();
        }
    }

    public Calendar getCurrentCalendar(User user) {
        EntityManager em = emf.createEntityManager();

        try {
            // 1. Ki·ªÉm tra xem user ƒë√£ c√≥ calendar ch∆∞a
            TypedQuery<Calendar> query = em.createQuery(
                    "SELECT c FROM Calendar c WHERE c.idUser = :user", Calendar.class);
            query.setParameter("user", user);

            List<Calendar> results = query.getResultList();
            if (!results.isEmpty()) {
                return results.get(0);
            }

            // 2. N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi m·ªôt calendar cho user
            Calendar newCalendar = new Calendar();
            newCalendar.setIdUser(user); // g√°n user cho calendar
            newCalendar.setName("L·ªãch c·ªßa " + user.getFirstName());
            newCalendar.setCreatedAt(new Date());
            newCalendar.setUpdatedAt(new Date());

            em.getTransaction().begin();
            em.persist(newCalendar);
            em.getTransaction().commit();

            return newCalendar;

        } catch (Exception e) {
            e.printStackTrace();
            return null;
        } finally {
            em.close();
        }
    }

    public void saveUserEvent(UserEvents event) {
        EntityManager em = emf.createEntityManager();
        try {
            em.getTransaction().begin();
            em.persist(event);
            em.getTransaction().commit();
        } catch (Exception e) {
            em.getTransaction().rollback();
            e.printStackTrace();
        } finally {
            em.close();
        }
    }

    private static LocalDateTime tryParseDateTime(String input) {
        List<String> patterns = List.of(
                "yyyy-MM-dd'T'HH:mm",
                "yyyy-MM-dd HH:mm",
                "dd/MM/yyyy HH:mm",
                "dd-MM-yyyy HH:mm"
        );

        for (String pattern : patterns) {
            try {
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern);
                return LocalDateTime.parse(input, formatter);
            } catch (Exception ignored) {
            }
        }

        throw new IllegalArgumentException("‚ùå Kh√¥ng th·ªÉ parse ng√†y gi·ªù: " + input);
    }

    public static void main(String[] args) {
        EmbeddingService embeddingService = new EmbeddingService();
        EmailReminderDAO emailReminderDAO = new EmailReminderDAO();
        CalendarDAO calendarDAO = new CalendarDAO();
        EventService eventService = new EventService();
        AgentEventService agentEventService = new AgentEventService();
        String aiResponse = "ƒê√£ ghi nh·∫≠n y√™u c·∫ßu c·∫≠p nh·∫≠t s·ª± ki·ªán \"ƒêi b∆°i\". D∆∞·ªõi ƒë√¢y l√† th√¥ng tin c·∫≠p nh·∫≠t:\n"
                + "\n"
                + "[\n"
                + "  {\n"
                + "    \"toolName\": \"UPDATE_EVENT\",\n"
                + "    \"args\": {\n"
                + "     \"original_title\": \"ƒêi b∆°i\",\n"
                + "      \"title\": \"H·ªçp nh√≥m\",\n"
                + "      \"start_time\": \"2025-07-16T09:00\",\n"
                + "      \"description\": \"Chu·∫©n b·ªã slide thuy·∫øt tr√¨nh\",\n"
                + "      \"location\": \"Ph√≤ng A301\"\n"
                + "    }\n"
                + "  }\n"
                + "]";

        Pattern jsonPattern = Pattern.compile("(\\[\\s*\\{[\\s\\S]*?\\}\\s*\\])");
        Matcher matcher = jsonPattern.matcher(aiResponse);
        System.out.println("üß† Full AI Response:\n" + aiResponse);

        String jsonPart = null;
        if (matcher.find()) {
            jsonPart = matcher.group();  // üéØ ph·∫ßn ch·ªâ ch·ª©a JSON n·ªôi b·ªô
        }

        List<Action> actions = tryParseActions(jsonPart);  // ‚úÖ truy·ªÅn JSON thu·∫ßn v√†o

        System.out.println("üéØ Actions parsed: " + actions);

        // ‚úÇÔ∏è 2. G·ª° ph·∫ßn JSON kh·ªèi aiResponse ƒë·ªÉ ch·ªâ hi·ªÉn th·ªã ph·∫ßn vƒÉn b·∫£n cho ng∆∞·ªùi d√πng
        String userVisibleText = jsonPart != null
                ? aiResponse.replace(jsonPart, "").trim()
                : aiResponse.trim();
        System.out.println(actions);
        StringBuilder systemResult = new StringBuilder();
        UserEvents event = null;

        System.out.println(actions);
        if (actions != null && !actions.isEmpty()) {
            int added = 0, updated = 0, deleted = 0;

            for (Action action : actions) {
                String tool = action.getToolName();

                try {
                    switch (tool) {
                        case "ADD_EVENT" -> {
                            if (!action.getArgs().containsKey("title")
                                    || !action.getArgs().containsKey("start_time")
                                    || !action.getArgs().containsKey("end_time")) {
                                systemResult.append("üìù Thi·∫øu th√¥ng tin s·ª± ki·ªán (ti√™u ƒë·ªÅ ho·∫∑c th·ªùi gian).\n");
                                continue;
                            }

                            String title = (String) action.getArgs().get("title");
                            String rawStart = (String) action.getArgs().get("start_time");
                            String rawEnd = (String) action.getArgs().get("end_time");

                            LocalDateTime start = tryParseDateTime(rawStart);
                            LocalDateTime end = tryParseDateTime(rawEnd);

                            event = new UserEvents();
                            event.setName(title);
                            event.setStartDate(Timestamp.valueOf(start));
                            event.setDueDate(Timestamp.valueOf(end));
                            event.setCreatedAt(new Date());
                            event.setUpdatedAt(new Date());
                            event.setIsAllDay(false);
                            event.setIsRecurring(false);
                            event.setColor("#2196f3");
                            event.setRemindMethod(true);
                            event.setRemindBefore(30);
                            event.setRemindUnit("minutes");

                            if (action.getArgs().containsKey("location")) {
                                event.setLocation((String) action.getArgs().get("location"));
                            }
                            if (action.getArgs().containsKey("description")) {
                                event.setDescription((String) action.getArgs().get("description"));
                            }

                            Calendar calendar = calendarDAO.selectCalendarById(1);
                            event.setIdCalendar(calendar);

                            agentEventService.saveUserEvent(event);
                            added++;
                        }

                        case "UPDATE_EVENT" -> {
                            UserEvents existing = null;

                            if (action.getArgs().containsKey("event_id")) {
                                int eventId = (int) action.getArgs().get("event_id");
                                existing = eventService.getEventById(eventId);
                            } else if (action.getArgs().containsKey("original_title")) {
                                String ori_title = (String) action.getArgs().get("original_title");
                                existing = eventService.getFirstEventByTitle(ori_title);
                                System.out.println(ori_title);
                            }

                            if (existing == null) {
                                systemResult.append("‚ùå Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán ƒë·ªÉ c·∫≠p nh·∫≠t.\n");
                                continue;
                            }

                            if (action.getArgs().containsKey("title")) {
                                existing.setName((String) action.getArgs().get("title"));
                            }
                            if (action.getArgs().containsKey("start_time")) {
                                existing.setStartDate(Timestamp.valueOf(tryParseDateTime((String) action.getArgs().get("start_time"))));
                            }
                            if (action.getArgs().containsKey("end_time")) {
                                existing.setDueDate(Timestamp.valueOf(tryParseDateTime((String) action.getArgs().get("end_time"))));
                            }
                            if (action.getArgs().containsKey("location")) {
                                existing.setLocation((String) action.getArgs().get("location"));
                            }
                            if (action.getArgs().containsKey("description")) {
                                existing.setDescription((String) action.getArgs().get("description"));
                            }

                            existing.setUpdatedAt(new Date());
                            eventService.updateEvent(existing);
                            updated++;
                        }

                        // C√≥ th·ªÉ th√™m c√°c case kh√°c nh∆∞ ADD_EVENT, DELETE_EVENT n·∫øu c·∫ßn
                        case "DELETE_EVENT" -> {
                            boolean deletedOne = false;
                            if (action.getArgs().containsKey("event_id")) {
                                int id = (int) action.getArgs().get("event_id");
                                deletedOne = eventService.removeEvent(id);
                            } else if (action.getArgs().containsKey("title")) {
                                String title = (String) action.getArgs().get("title");
                                deletedOne = eventService.deleteByTitle(title);
                            }

                            if (deletedOne) {
                                deleted++;
                            } else {
                                systemResult.append("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán ƒë·ªÉ xo√°.\n");
                            }
                        }

                        default ->
                            systemResult.append("‚ö†Ô∏è H√†nh ƒë·ªông kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: ").append(tool).append("\n");
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    systemResult.append("‚ùå L·ªói khi x·ª≠ l√Ω h√†nh ƒë·ªông: ").append(tool).append("\n");
                }
            }
            if (added > 0) {
                systemResult.append("‚úÖ ƒê√£ th√™m ").append(added).append(" s·ª± ki·ªán.\n");
            }
            if (updated > 0) {
                systemResult.append("üîÑ ƒê√£ c·∫≠p nh·∫≠t ").append(updated).append(" s·ª± ki·ªán.\n");
            }
            if (deleted > 0) {
                systemResult.append("üóëÔ∏è ƒê√£ xo√° ").append(deleted).append(" s·ª± ki·ªán.\n");
            }
        } else {
            System.out.println("Khong co hanh dong nao");
        }
    }

}
