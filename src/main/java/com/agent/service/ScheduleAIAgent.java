/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.agent.service;

import com.agent.model.Action;
import com.agent.model.Message;
import com.agent.model.ScheduleItem;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.Serializable;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

/**
 *
 * @author Admin
 */
public class ScheduleAIAgent implements Serializable{
    private final LLM llm;
    private final ExcelDataManager dataManager;
    private final String sessionId;
    private final List<Message> conversationHistory;
    private final List<ScheduleItem> currentSchedule;
    private static final ObjectMapper objectMapper = new ObjectMapper();
    public ScheduleAIAgent() {
        this.llm = new LLM();
        this.dataManager = new ExcelDataManager();
        this.sessionId = generateSessionId();
        this.conversationHistory = new ArrayList<>();
        this.currentSchedule = dataManager.loadSchedules();

        initializeSystemMessage();
    }

    private void initializeSystemMessage() {
        StringBuilder systemPrompt = new StringBuilder();
        systemPrompt.append("B·∫°n l√† m·ªôt Tr·ª£ l√Ω AI th√¥ng minh chuy√™n h·ªó tr·ª£ ng∆∞·ªùi d√πng qu·∫£n l√Ω l·ªãch c√° nh√¢n v√† s·ª± ki·ªán.\n");
        systemPrompt.append("B·∫°n c·∫ßn hi·ªÉu ƒë∆∞·ª£c c√°c y√™u c·∫ßu ph·ª©c t·∫°p c·ªßa ng∆∞·ªùi d√πng v·ªÅ th·ªùi gian, ng√†y th√°ng v√† l·ªãch h·ªçc/l√†m vi·ªác ƒë·ªãnh k·ª≥.\n\n");

        systemPrompt.append("## NHI·ªÜM V·ª§ C·ª¶A B·∫†N:\n");
        systemPrompt.append("1. Gi√∫p ng∆∞·ªùi d√πng th√™m, ch·ªânh s·ª≠a, g·ª£i √Ω ho·∫∑c xem c√°c s·ª± ki·ªán trong l·ªãch.\n");
        systemPrompt.append("2. Hi·ªÉu c√°c m·ªëc th·ªùi gian nh∆∞: 'h√¥m nay', 'tu·∫ßn sau', 'ba bu·ªïi m·ªôt tu·∫ßn', 'ch·ªâ v√†o bu·ªïi t·ªëi', 'tr·ª´ th·ª© 2', v.v.\n");
        systemPrompt.append("3. T·ª± ƒë·ªông ph√¢n t√≠ch y√™u c·∫ßu v√† t·∫°o nhi·ªÅu s·ª± ki·ªán n·∫øu c·∫ßn thi·∫øt (v√≠ d·ª•: l·∫∑p l·∫°i 3 bu·ªïi m·ªói tu·∫ßn).\n");
        systemPrompt.append("4. **Tuy·ªát ƒë·ªëi KH√îNG tr·∫£ JSON cho ng∆∞·ªùi d√πng**, m√† ch·ªâ ph·∫£n h·ªìi b·∫±ng vƒÉn b·∫£n d·ªÖ hi·ªÉu.\n\n");

        systemPrompt.append("## KHI NG∆Ø·ªúI D√ôNG MU·ªêN T·∫†O S·ª∞ KI·ªÜN:\n");
        systemPrompt.append("- N·∫øu ƒë·ªß th√¥ng tin (ti√™u ƒë·ªÅ, th·ªùi gian b·∫Øt ƒë·∫ßu, th·ªùi gian k·∫øt th√∫c), t·∫°o m·ªôt ho·∫∑c nhi·ªÅu s·ª± ki·ªán.\n");
        systemPrompt.append("- Tr·∫£ v·ªÅ ph·∫£n h·ªìi vƒÉn b·∫£n nh∆∞: '‚úÖ ƒê√£ th√™m 3 s·ª± ki·ªán h·ªçc ti·∫øng Anh v√†o c√°c bu·ªïi t·ªëi th·ª© 3, 5, 7 trong tu·∫ßn n√†y.'\n");
        systemPrompt.append("- Ng·∫ßm ƒë·ªãnh t·∫°o JSON n·ªôi b·ªô theo ƒë·ªãnh d·∫°ng:\n");
        systemPrompt.append("{ \"toolName\": \"ADD_EVENT\", \"args\": { \"title\": \"T√™n s·ª± ki·ªán\", \"start_time\": \"YYYY-MM-DDTHH:mm\", \"end_time\": \"YYYY-MM-DDTHH:mm\" } }\n");
        systemPrompt.append("- Kh√¥ng hi·ªÉn th·ªã JSON n√†y v·ªõi ng∆∞·ªùi d√πng.\n\n");

        systemPrompt.append("## KHI CH∆ØA ƒê·ª¶ TH√îNG TIN:\n");
        systemPrompt.append("- N·∫øu thi·∫øu ti√™u ƒë·ªÅ ho·∫∑c th·ªùi gian, h√£y h·ªèi l·∫°i ng∆∞·ªùi d√πng r√µ r√†ng, v√≠ d·ª•: 'B·∫°n mu·ªën h·ªçc v√†o l√∫c m·∫•y gi·ªù v√† trong nh·ªØng ng√†y n√†o?'\n");
        systemPrompt.append("- ƒê·ª´ng t·∫°o s·ª± ki·ªán ho·∫∑c JSON n·∫øu ch∆∞a r√µ y√™u c·∫ßu.\n\n");

        systemPrompt.append("## KHI NG∆Ø·ªúI D√ôNG Y√äU C·∫¶U G·ª¢I √ù TH·ªúI GIAN R·∫¢NH:\n");
        systemPrompt.append("- Ph√¢n t√≠ch l·ªãch hi·ªán t·∫°i, t√¨m c√°c kho·∫£ng tr·ªëng d√†i h∆°n 30 ph√∫t.\n");
        systemPrompt.append("- G·ª£i √Ω b·∫±ng vƒÉn b·∫£n nh∆∞: 'B·∫°n r·∫£nh v√†o 19:00 - 20:00 ng√†y mai, mu·ªën ƒë·∫∑t l·ªãch kh√¥ng?'\n");
        systemPrompt.append("- N·∫øu h·ªç ƒë·ªìng √Ω, b·∫°n s·∫Ω t·ª± ƒë·ªông t·∫°o JSON n·ªôi b·ªô.\n\n");


        systemPrompt.append("Ng√†y hi·ªán t·∫°i l√† " + LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")) + ".\n");


// Kh√¥ng c·∫ßn ƒëo·∫°n hi·ªÉn th·ªã m√¥ t·∫£ l·∫°i n·ªôi dung cho ng∆∞·ªùi d√πng n·ªØa


        systemPrompt.append("- N·∫øu ch∆∞a r√µ n·ªôi dung ho·∫∑c ng∆∞·ªùi d√πng ch∆∞a x√°c nh·∫≠n th·ªùi gian g·ª£i √Ω, h√£y h·ªèi l·∫°i ng∆∞·ªùi d√πng tr∆∞·ªõc khi tr·∫£ v·ªÅ JSON.\n");

        systemPrompt.append("C√°c lo·∫°i l·ªãch tr√¨nh:\n");
        for (ScheduleItem.ScheduleType type : ScheduleItem.ScheduleType.values()) {
            systemPrompt.append("- ").append(type.getDisplayName()).append("\n");
        }


        conversationHistory.add(new Message("system", systemPrompt.toString()));
    }

    private String generateSessionId() {
        return "SCHEDULE_SESSION_" + System.currentTimeMillis();
    }

    /**
     * Process user input and generate AI response
     */
    private void updateTodayInfo() {
        // X√≥a c√°c message system ch·ª©a ng√†y h√¥m nay c≈© n·∫øu c√≥ (ƒë·ªÉ tr√°nh tr√πng)
        conversationHistory.removeIf(m -> m.getRole().equals("system") && m.getContent().startsWith("Ng√†y h√¥m nay l√†"));

        String today = LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
        conversationHistory.add(0, new Message("system", "Ng√†y h√¥m nay l√†: " + today));
    }

    public String processUserInput(String userInput) {
        conversationHistory.add(new Message("user", userInput + "\n" +
                "N·∫øu b·∫°n mu·ªën th√™m s·ª± ki·ªán, h√£y tr·∫£ v·ªÅ danh s√°ch c√°c h√†nh ƒë·ªông ·ªü d·∫°ng JSON:\n" +
                "[\n" +
                "  {\n" +
                "    \"tool_name\": \"ADD_EVENT\",\n" +
                "    \"args\": {\n" +
                "      \"title\": \"...\",\n" +
                "      \"start_time\": \"...\",\n" +
                "      \"end_time\": \"...\"\n" +
                "    }\n" +
                "  }\n" +
                "]\n" +
                "N·∫øu kh√¥ng c√≥ h√†nh ƒë·ªông n√†o, ch·ªâ c·∫ßn ph·∫£n h·ªìi b√¨nh th∆∞·ªùng.\n" +
                "‚ö†Ô∏è JSON action s·∫Ω kh√¥ng hi·ªÉn th·ªã ra giao di·ªán, d√πng cho h·ªá th·ªëng x·ª≠ l√Ω t·ª± ƒë·ªông."
        ));

        String aiResponse = llm.generateResponse(conversationHistory);
        System.out.println("üì• AI Response:\n" + aiResponse);
        conversationHistory.add(new Message("assistant", aiResponse));

        // ‚úÇÔ∏è 1. C·ªë g·∫Øng t√°ch JSON ra kh·ªèi ph·∫£n h·ªìi
        List<Action> actions = tryParseActions(aiResponse);
        System.out.println("üéØ Actions parsed: " + actions);


        // ‚úÇÔ∏è 2. G·ª° ph·∫ßn JSON kh·ªèi aiResponse ƒë·ªÉ ch·ªâ hi·ªÉn th·ªã ph·∫ßn vƒÉn b·∫£n cho ng∆∞·ªùi d√πng
        String userVisibleText = aiResponse.replaceAll("(?s)\\[\\s*\\{.*?\\}\\s*\\]", "").trim();

        StringBuilder systemResult = new StringBuilder();

        if (actions != null && !actions.isEmpty()) {
            int count = 0;

            for (Action action : actions) {
                if ("ADD_EVENT".equals(action.getToolName())) {
                    try {
                        if (!action.getArgs().containsKey("title") ||
                                !action.getArgs().containsKey("start_time") ||
                                !action.getArgs().containsKey("end_time")) {
                            systemResult.append("üìù Thi·∫øu th√¥ng tin s·ª± ki·ªán (ti√™u ƒë·ªÅ ho·∫∑c th·ªùi gian).\n");
                            continue;
                        }

                        ScheduleItem item = new ScheduleItem(
                                (String) action.getArgs().get("title"),
                                LocalDateTime.parse((String) action.getArgs().get("start_time")),
                                LocalDateTime.parse((String) action.getArgs().get("end_time"))
                        );
                        currentSchedule.add(item);
                        count++;

                    } catch (Exception e) {
                        systemResult.append("‚ö†Ô∏è L·ªói ƒë·ªãnh d·∫°ng th·ªùi gian trong s·ª± ki·ªán.\n");
                    }

                } else {
                    systemResult.append("‚ö†Ô∏è H√†nh ƒë·ªông kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: ")
                            .append(action.getToolName()).append("\n");
                }
            }

            dataManager.saveSchedules(currentSchedule);
            if (count > 0) {
                systemResult.append("‚úÖ ƒê√£ th√™m ").append(count).append(" s·ª± ki·ªán v√†o l·ªãch tr√¨nh.");
            }
        }

        // ‚úÖ Tr·∫£ k·∫øt qu·∫£ ƒë·∫ßy ƒë·ªß: ph·∫£n h·ªìi c·ªßa AI + k·∫øt qu·∫£ h·ªá th·ªëng
        return (userVisibleText + "\n\n" + systemResult).trim();
    }



    public static List<Action> tryParseActions(String aiResponse) {
        try {
            aiResponse = aiResponse.trim();

            // Ki·ªÉm tra xem c√≥ b·∫Øt ƒë·∫ßu b·∫±ng '{' ho·∫∑c '[' kh√¥ng => JSON
            if (!(aiResponse.startsWith("{") || aiResponse.startsWith("["))) {
                return Collections.emptyList();  // Kh√¥ng ph·∫£i JSON, b·ªè qua
            }

            if (aiResponse.startsWith("[")) {
                return Arrays.asList(objectMapper.readValue(aiResponse, Action[].class));
            } else {
                Action single = objectMapper.readValue(aiResponse, Action.class);
                return Collections.singletonList(single);
            }
        } catch (Exception e) {
            System.out.println("‚ùå Kh√¥ng th·ªÉ parse Action(s): " + e.getMessage());
            return Collections.emptyList();
        }
    }



    //    public String processUserInput(String userInput) {
//        conversationHistory.add(new Message("user", userInput));
//        updateTodayInfo();
//
//        ActionType action = ActionRouter.detectAction(userInput);
//
//        switch (action) {
//            case ADD_EVENT:
//                return handleAddEvent(userInput);
//            case SHOW_TODAY:
//                return handleShowToday();
//            case SHOW_WEEK:
//                return getConversationSummary();
//            case SUGGEST_TIME:
//                return suggestAvailableTime();
//            case END_CONVERSATION:
//                return "K·∫øt th√∫c r·ªìi nh√© b·∫°n!";
//            case UNKNOWN:
//            default:
//                return "M√¨nh ch∆∞a hi·ªÉu r√µ l·∫Øm, b·∫°n c√≥ th·ªÉ n√≥i l·∫°i kh√¥ng?";
//        }
//    }
    private String handleShowToday() {
        LocalDate today = LocalDate.now();
        List<ScheduleItem> todayEvents = currentSchedule.stream()
                .filter(e -> e.getStartTime().toLocalDate().equals(today))
                .toList();

        if (todayEvents.isEmpty()) return "üì≠ H√¥m nay b·∫°n kh√¥ng c√≥ l·ªãch n√†o.";

        StringBuilder sb = new StringBuilder("üìÖ L·ªãch h√¥m nay:\n");
        for (ScheduleItem e : todayEvents) {
            sb.append("‚Ä¢ ").append(e.getTitle()).append(" l√∫c ")
                    .append(e.getStartTime().format(DateTimeFormatter.ofPattern("HH:mm"))).append("\n");
        }
        return sb.toString();
    }

    private String suggestAvailableTime() {
        // Gi·∫£ s·ª≠ b·∫°n ch·ªâ check h√¥m nay, t·ª´ 8h ƒë·∫øn 20h
        LocalDateTime start = LocalDate.now().atTime(8, 0);
        LocalDateTime end = LocalDate.now().atTime(20, 0);
        List<ScheduleItem> events = currentSchedule.stream()
                .filter(e -> e.getStartTime().toLocalDate().equals(LocalDate.now()))
                .sorted(Comparator.comparing(ScheduleItem::getStartTime))
                .toList();

        List<String> freeSlots = new ArrayList<>();
        for (ScheduleItem event : events) {
            if (start.isBefore(event.getStartTime())) {
                freeSlots.add(start.format(DateTimeFormatter.ofPattern("HH:mm")) + " - " +
                        event.getStartTime().format(DateTimeFormatter.ofPattern("HH:mm")));
            }
            start = event.getEndTime().isAfter(start) ? event.getEndTime() : start;
        }

        if (start.isBefore(end)) {
            freeSlots.add(start.format(DateTimeFormatter.ofPattern("HH:mm")) + " - " +
                    end.format(DateTimeFormatter.ofPattern("HH:mm")));
        }

        if (freeSlots.isEmpty()) return "H√¥m nay b·∫°n ƒë√£ k√≠n l·ªãch! üòÖ";

        StringBuilder sb = new StringBuilder("üïê Th·ªùi gian b·∫°n c√≤n r·∫£nh h√¥m nay:\n");
        freeSlots.forEach(slot -> sb.append("‚Ä¢ ").append(slot).append("\n"));
        return sb.toString();
    }


    private String handleAddEvent(String userInput) {
        ScheduleItem item = parseScheduleFromInput(userInput, "");
        if (item != null) {
            currentSchedule.add(item);
            dataManager.saveSchedules(currentSchedule);
            return "‚úÖ ƒê√£ th√™m s·ª± ki·ªán: " + item.getTitle();
        }
        return "Kh√¥ng th·ªÉ th√™m s·ª± ki·ªán.";
    }


    private String extractTitle(String input) {
        String[] stopWords = {
                "th√™m", "l·ªãch", "h·∫πn", "v√†o", "l√∫c", "t·ªëi", "s√°ng", "chi·ªÅu", "tr∆∞a",
                "nay", "mai", "gi·ªù", "ph√∫t", "ng√†y", "ƒëi", "xem", "l√†m", "h·ªçc", "g·∫∑p", "c√πng"
        };

        // Chu·∫©n h√≥a c√¢u
        input = input.toLowerCase().replaceAll("[^a-zA-Z0-9√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë\\s]", "");

        // T√°ch t·ª´
        List<String> words = new ArrayList<>(Arrays.asList(input.split("\\s+")));

        // L·ªçc b·ªè c√°c t·ª´ kh√¥ng mang nghƒ©a danh t·ª´
        words.removeIf(w -> Arrays.asList(stopWords).contains(w));

        if (words.isEmpty()) return "L·ªãch ch∆∞a r√µ";

        // G·ªôp l·∫°i l√†m ti√™u ƒë·ªÅ (c√≥ th·ªÉ l·∫•y t·ª´ cu·ªëi, ho·∫∑c t·∫•t c·∫£ t·ª´ c√≤n l·∫°i)
        StringBuilder title = new StringBuilder();
        for (String word : words) {
            title.append(Character.toUpperCase(word.charAt(0)))
                    .append(word.substring(1))
                    .append(" ");
        }

        return title.toString().trim();
    }

    private ScheduleItem parseScheduleFromInput(String userInput, String aiResponse) {
        // Simplified parsing logic - in real implementation, this would be more sophisticated
        try {
            if (userInput.toLowerCase().contains("l·ªãch") || userInput.toLowerCase().contains("h·∫πn") || userInput.toLowerCase().contains("ki·ªán")) {
                // Create a basic schedule item
                LocalDateTime now = LocalDateTime.now();
                String title = extractTitle(userInput);
                ScheduleItem item = new ScheduleItem(title, now, now.plusHours(1));

                // Detect type
                if (userInput.toLowerCase().contains("h·ªçc")) {
                    item.setScheduleType(ScheduleItem.ScheduleType.STUDY);
                } else if (userInput.toLowerCase().contains("l√†m vi·ªác") || userInput.toLowerCase().contains("h·ªçp")) {
                    item.setScheduleType(ScheduleItem.ScheduleType.WORK);
                } else if (userInput.toLowerCase().contains("du l·ªãch")) {
                    item.setScheduleType(ScheduleItem.ScheduleType.TRAVEL);
                } else if (userInput.toLowerCase().contains("s·ª± ki·ªán")) {
                    item.setScheduleType(ScheduleItem.ScheduleType.EVENT);
                }

                return item;
            }
        } catch (Exception e) {
            System.err.println("L·ªói parse l·ªãch: " + e.getMessage());
        }

        return null;
    }

    public String getGreeting() {
        List<Message> greetingMessages = new ArrayList<>();
        greetingMessages.add(conversationHistory.get(0));
        greetingMessages.add(new Message("user", "Xin ch√†o, t√¥i c·∫ßn t∆∞ v·∫•n qu·∫£n l√Ω l·ªãch tr√¨nh"));

        try {
            return llm.generateResponse(greetingMessages);
        } catch (Exception e) {
            return "ü§ñ Xin ch√†o! T√¥i l√† AI Assistant qu·∫£n l√Ω l·ªãch tr√¨nh th√¥ng minh.\n" +
                    "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n" +
                    "‚úÖ T·∫°o l·ªãch h·ªçc t·∫≠p, c√¥ng vi·ªác, s·ª± ki·ªán\n" +
                    "‚úÖ T·ªëi ∆∞u h√≥a th·ªùi gian\n" +
                    "‚úÖ ƒê∆∞a ra l·ªùi khuy√™n qu·∫£n l√Ω th·ªùi gian\n\n" +
                    "H√£y chia s·∫ª k·∫ø ho·∫°ch c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu!";
        }
    }

    public boolean shouldEndConversation(String userInput) {
        String input = userInput.toLowerCase().trim();
        return input.equals("bye") || input.equals("t·∫°m bi·ªát") ||
                input.equals("k·∫øt th√∫c") || input.equals("quit") ||
                input.equals("exit") || input.equals("end");
    }

    public String getConversationSummary() {
        if (conversationHistory.size() <= 1) {
            return "Kh√¥ng c√≥ cu·ªôc tr√≤ chuy·ªán n√†o ƒë∆∞·ª£c ghi nh·∫≠n.";
        }

        StringBuilder summary = new StringBuilder();
        summary.append("üìå T√ìM T·∫ÆT L·ªäCH TR√åNH:\n");

        for (ScheduleItem item : currentSchedule) {
            summary.append("‚Ä¢ [").append(item.getScheduleType().getDisplayName()).append("] ")
                    .append(item.getTitle()).append(" - ")
                    .append(item.getStartTime().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")))
                    .append("\n");
        }

        summary.append("\nüí° S·ªë l∆∞·ª£ng s·ª± ki·ªán: ").append(currentSchedule.size());

        return summary.toString();
    }

    public List<ScheduleItem> getCurrentSchedule() {
        return new ArrayList<>(currentSchedule);
    }
}

/**
 * Console chat application for schedule management
 */
