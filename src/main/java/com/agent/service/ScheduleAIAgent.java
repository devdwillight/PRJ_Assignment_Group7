/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.agent.service;

import com.agent.model.Action;
import com.agent.qdrant.model.ActionType;
import com.agent.model.Message;
import com.agent.model.ScheduleItem;
import com.agent.model.TimeSlot;
import com.agent.qdrant.model.PendingEvent;
import com.agent.qdrant.model.TimeContext;
import com.agent.qdrant.service.VectorIntentClassifier;
import com.dao.Calendar.CalendarDAO;
import com.dao.Reminder.EmailReminderDAO;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.model.Calendar;
import com.model.UserEvents;
import com.service.Event.EventService;
import com.service.Event.TimeSlotUnit;
import java.io.Serializable;
import java.sql.Timestamp;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Admin
 */
public class ScheduleAIAgent implements Serializable {

    private final LLM llm;
    private final String sessionId;
    private final List<Message> conversationHistory;
    private static final ObjectMapper objectMapper = new ObjectMapper();
    private Map<String, PendingEvent> pendingEvents = new HashMap<>();
    private EmbeddingService embeddingService = new EmbeddingService();
    private EmailReminderDAO emailReminderDAO = new EmailReminderDAO();
    private CalendarDAO calendarDAO = new CalendarDAO();
    private EventService eventService = new EventService();
    private AgentEventService agentEventService = new AgentEventService();
    private VectorIntentClassifier classifier = new VectorIntentClassifier();
    private WheatherService wheatherService = new WheatherService();

    public ScheduleAIAgent() {
        this.llm = new LLM();
        this.sessionId = generateSessionId();
        this.conversationHistory = new ArrayList<>();

        initializeSystemMessage();
    }

    private void initializeSystemMessage() {
        StringBuilder systemPrompt = new StringBuilder();

        systemPrompt.append("""
B·∫°n l√† m·ªôt Tr·ª£ l√Ω AI gi√∫p ng∆∞·ªùi d√πng qu·∫£n l√Ω l·ªãch tr√¨nh h·ªçc t·∫≠p v√† c√¥ng vi·ªác v√† lu√¥n nh·ªõ c√°c ng√†y l·ªÖ v√† s·ª± ki·ªán quan tr·ªçng c·ªßa Vi·ªát Nam.
H√£y hi·ªÉu ng√¥n ng·ªØ t·ª± nhi√™n, linh ho·∫°t v·ªõi c√°c m√¥ t·∫£ nh∆∞ "t·ªëi nay", "cu·ªëi tu·∫ßn", "3 bu·ªïi m·ªói tu·∫ßn", v.v.

## M·ª§C TI√äU:
- G·ª£i √Ω, t·∫°o, s·ª≠a, ho·∫∑c xo√° s·ª± ki·ªán.
- Lu√¥n ph·∫£n h·ªìi b·∫±ng vƒÉn b·∫£n t·ª± nhi√™n (kh√¥ng hi·ªán JSON).
- N·∫øu thi·∫øu th√¥ng tin, h√£y h·ªèi l·∫°i ng∆∞·ªùi d√πng.
- B·∫°n h√£y ph·∫£n h·ªìi d·ª±a theo system message

## KHI T·∫†O S·ª∞ KI·ªÜN:
- Khi ng∆∞·ªùi d√πng n√≥i c√°c c√¢u nh∆∞:
  - "T·∫°o l·ªãch h·∫πn l√∫c 9h ng√†y mai"
  - "Th√™m event h·ªçc nh√≥m"
  - "L√™n l·ªãch h·ªçp v·ªõi team v√†o th·ª© 6"
  => Hi·ªÉu l√† ng∆∞·ªùi d√πng mu·ªën **t·∫°o s·ª± ki·ªán m·ªõi**.
-N·∫øu ƒë·ªß th√¥ng tin, t·∫°o JSON n·ªôi b·ªô v√† lu√¥n nh·ªõ kh√¥ng hi·ªÉn th·ªã JSON cho ng∆∞·ªùi d√πng
[
  {
    "toolName": "ADD_EVENT",
    "args": {
      "title": "...",
      "start_time": "YYYY-MM-DDTHH:mm",
      "end_time": "YYYY-MM-DDTHH:mm",
      "description": "...",
      "location": "...",
      "is_all_day": false,
      "is_recurring": false,
      "color": "#2196f3",
      "remind_method": true,
      "remind_before": 30,
      "remind_unit": "minutes"
    }
  }
]
- N·∫øu ph√°t hi·ªán th·ªùi gian b·ªã tr√πng v·ªõi s·ª± ki·ªán kh√°c, h√£y h·ªèi l·∫°i ng∆∞·ªùi d√πng m·ªôt th·ªùi gian kh√°c. Kh√¥ng t·ª± √Ω th√™m n·∫øu b·ªã tr√πng.

## KHI S·ª¨A S·ª∞ KI·ªÜN:
- Khi ng∆∞·ªùi d√πng n√≥i c√°c c√¢u nh∆∞:
    -"Thay ƒë·ªïi th·ªùi gian c·ªßa l·ªãch h·∫πn `ƒêi b∆°i` l·∫°i"
    -"S·ª≠a l·ªãch h·∫πn `event_id` = 1"
    -"Update l·ªãch h·∫πn"
    => Hi·ªÉu l√† ng∆∞·ªùi d√πng mu·ªën** S·ª≠a s·ª± ki·ªán"
- N·∫øu c√≥ `event_id`, d√πng n√≥.
- N·∫øu kh√¥ng, d√πng `original_title` ƒë·ªÉ t√¨m s·ª± ki·ªán c·∫ßn s·ª≠a.
- V√≠ d·ª•:
[
  {
    "toolName": "UPDATE_EVENT",
    "args": {
      "event_id": 123,
      "original_title": "Cu·ªôc h·ªçp c≈©",
      "title": "Cu·ªôc h·ªçp m·ªõi",
      "start_time": "YYYY-MM-DDTHH:mm",
      "description": "m√¥ t·∫£ m·ªõi"
    }
  }
]

## KHI XO√Å S·ª∞ KI·ªÜN:
- Khi ng∆∞·ªùi d√πng n√≥i c√°c c√¢u nh∆∞:
    -"X√≥a l·ªãch h·∫πn `H·ªçc to√°n` ng√†y 21 th√°ng 7"
    -"X√≥a l·ªãch h·ªçc Ti·∫øng Anh"
    -"X√≥a l·ªãch h·∫πn `event_id` = 1"
    => Hi·ªÉu l√† ng∆∞·ªùi d√πng mu·ªën** X√≥a s·ª± ki·ªán"
- D√πng `event_id` n·∫øu c√≥, ho·∫∑c `title` n·∫øu kh√¥ng c√≥ ID.
- V√≠ d·ª•:
[
  { "toolName": "DELETE_EVENT", "args": { "event_id": 42 } }
]
ho·∫∑c
[
  { "toolName": "DELETE_EVENT", "args": { "title": "T√™n s·ª± ki·ªán" } }
]
                            

## NGUY√äN T·∫ÆC:
- Tr√°nh d√πng t·ª´ k·ªπ thu·∫≠t v·ªõi ng∆∞·ªùi d√πng.
- N·∫øu ph√°t hi·ªán th·ªùi gian b·ªã tr√πng v·ªõi s·ª± ki·ªán kh√°c, h√£y h·ªèi l·∫°i ng∆∞·ªùi d√πng m·ªôt th·ªùi gian kh√°c. Kh√¥ng t·ª± √Ω th√™m n·∫øu b·ªã tr√πng.
- Lu√¥n di·ªÖn gi·∫£i √Ω ƒë·ªãnh r√µ r√†ng, th√¢n thi·ªán.
- Ng√†y hi·ªán t·∫°i l√† """ + LocalDate.now().format(DateTimeFormatter.ofPattern("dd/MM/yyyy")) + ".\n");
// Kh√¥ng c·∫ßn ƒëo·∫°n hi·ªÉn th·ªã m√¥ t·∫£ l·∫°i n·ªôi dung cho ng∆∞·ªùi d√πng n·ªØa
        systemPrompt.append("- N·∫øu ch∆∞a r√µ n·ªôi dung ho·∫∑c ng∆∞·ªùi d√πng ch∆∞a x√°c nh·∫≠n th·ªùi gian g·ª£i √Ω, h√£y h·ªèi l·∫°i ng∆∞·ªùi d√πng tr∆∞·ªõc khi tr·∫£ v·ªÅ JSON.\n");

        systemPrompt.append("C√°c lo·∫°i l·ªãch tr√¨nh:\n");
        for (ScheduleItem.ScheduleType type : ScheduleItem.ScheduleType.values()) {
            systemPrompt.append("- ").append(type.getDisplayName()).append("\n");
        }

        conversationHistory.add(new Message("system", systemPrompt.toString()));
    }

    private String generateSessionId() {
        return "SCHEDULE_SESSION_" + System.currentTimeMillis();
    }

    /**
     * Process user input and generate AI response
     */
    public String processUserInput(String userInput) throws Exception {

        conversationHistory.add(new Message("user", userInput));

        String aiResponse = llm.generateResponse(conversationHistory);
        UserEvents recentEvent = null;
        StringBuilder systemResult = new StringBuilder();

        aiResponse = aiResponse.replaceAll("(?s)```json\\s*", "").replaceAll("(?s)```\\s*", "");

        Pattern jsonPattern = Pattern.compile("(\\[\\s*\\{[\\s\\S]*?\\}\\s*\\])");
        Matcher matcher = jsonPattern.matcher(aiResponse);
        System.out.println("üß† Full AI Response:\n" + aiResponse);

        String jsonPart = null;
        if (matcher.find()) {
            jsonPart = matcher.group();  // üéØ ph·∫ßn ch·ªâ ch·ª©a JSON n·ªôi b·ªô
        }

        List<Action> actions = tryParseActions(jsonPart);  // ‚úÖ truy·ªÅn JSON thu·∫ßn v√†o

        // ‚úÇÔ∏è 2. G·ª° ph·∫ßn JSON kh·ªèi aiResponse ƒë·ªÉ ch·ªâ hi·ªÉn th·ªã ph·∫ßn vƒÉn b·∫£n cho ng∆∞·ªùi d√πng
        String userVisibleText = jsonPart != null
                ? aiResponse.replace(jsonPart, "").trim()
                : aiResponse.trim();

        if (actions != null && !actions.isEmpty()) {
            int added = 0, updated = 0, deleted = 0;

            for (Action action : actions) {
                String tool = action.getToolName();

                try {
                    switch (tool) {
                        case "ADD_EVENT" -> {
                            if (!action.getArgs().containsKey("title")
                                    || !action.getArgs().containsKey("start_time")
                                    || !action.getArgs().containsKey("end_time")) {
                                systemResult.append("üìù Thi·∫øu th√¥ng tin s·ª± ki·ªán (ti√™u ƒë·ªÅ ho·∫∑c th·ªùi gian).\n");
                                continue;
                            }

                            String title = (String) action.getArgs().get("title");
                            String rawStart = (String) action.getArgs().get("start_time");
                            String rawEnd = (String) action.getArgs().get("end_time");

                            LocalDateTime start = tryParseDateTime(rawStart);
                            LocalDateTime end = tryParseDateTime(rawEnd);

                            List<UserEvents> conflicted = eventService.isTimeConflict(start, end);
                            if (!conflicted.isEmpty()) {
                                systemResult.append("‚ö†Ô∏è S·ª± ki·ªán b·ªã tr√πng th·ªùi gian v·ªõi c√°c s·ª± ki·ªán sau:\n");
                                for (UserEvents conflict : conflicted) {
                                    systemResult.append(" - ").append(conflict.getName())
                                            .append(" (").append(conflict.getStartDate())
                                            .append(" - ").append(conflict.getDueDate()).append(")\n");
                                }
                                continue;
                            }

                            UserEvents event = new UserEvents();
                            event.setName(title);
                            event.setStartDate(Timestamp.valueOf(start));
                            event.setDueDate(Timestamp.valueOf(end));
                            event.setCreatedAt(new Date());
                            event.setUpdatedAt(new Date());
                            event.setIsAllDay(false);
                            event.setIsRecurring(false);
                            event.setColor("#2196f3");
                            event.setRemindMethod(true);
                            event.setRemindBefore(30);
                            event.setRemindUnit("minutes");

                            if (action.getArgs().containsKey("location")) {
                                event.setLocation((String) action.getArgs().get("location"));
                            }
                            if (action.getArgs().containsKey("description")) {
                                event.setDescription((String) action.getArgs().get("description"));
                            }
                            Calendar calendar = calendarDAO.selectCalendarById(1);
                            event.setIdCalendar(calendar);

                            String intentWheather = classifier.classifyWeather(userInput);
                            if (intentWheather.equals("outdoor_activities")) {
                                String forecastNote = wheatherService.getForecastNote(start, "Da Nang");
                                if (forecastNote != null && !forecastNote.isEmpty()) {
                                    pendingEvents.put("default", new PendingEvent(event));
                                    systemResult.append("üå¶ ").append(forecastNote).append("\n").
                                            append("‚ùìB·∫°n c√≥ mu·ªën ti·∫øp t·ª•c t·∫°o s·ª± ki·ªán ngo√†i tr·ªùi n√†y kh√¥ng?").
                                            append("\n");
                                    return systemResult.toString(); // D·ª´ng ·ªü ƒë√¢y
                                } else {
                                    
                                    System.out.println("‚õÖ Th·ªùi ti·∫øt t·ªët, t·ª± ƒë·ªông th√™m s·ª± ki·ªán.");
                                }

                            }

                            agentEventService.saveUserEvent(event);
                            systemResult.append("‚úÖ ƒê√£ th√™m s·ª± ki·ªán: ").append(title).append(" v√†o l·ªãch tr√¨nh.\n");
                            recentEvent = event;
                            added++;

                        }

                        case "UPDATE_EVENT" -> {
                            UserEvents existing = null;

                            if (action.getArgs().containsKey("event_id")) {
                                int eventId = (int) action.getArgs().get("event_id");
                                existing = eventService.getEventById(eventId);
                            } else if (action.getArgs().containsKey("original_title")) {
                                String ori_title = (String) action.getArgs().get("original_title");
                                existing = eventService.getFirstEventByTitle(ori_title);
                                System.out.println(ori_title);
                            }

                            if (existing == null) {
                                systemResult.append("‚ùå Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán ƒë·ªÉ c·∫≠p nh·∫≠t.\n");
                                continue;
                            }

                            if (action.getArgs().containsKey("title")) {
                                existing.setName((String) action.getArgs().get("title"));
                            }
                            if (action.getArgs().containsKey("start_time")) {
                                existing.setStartDate(Timestamp.valueOf(tryParseDateTime((String) action.getArgs().get("start_time"))));
                            }
                            if (action.getArgs().containsKey("end_time")) {
                                existing.setDueDate(Timestamp.valueOf(tryParseDateTime((String) action.getArgs().get("end_time"))));
                            }
                            if (action.getArgs().containsKey("location")) {
                                existing.setLocation((String) action.getArgs().get("location"));
                            }
                            if (action.getArgs().containsKey("description")) {
                                existing.setDescription((String) action.getArgs().get("description"));
                            }

                            existing.setUpdatedAt(new Date());
                            eventService.updateEvent(existing);
                            updated++;
                        }

                        case "DELETE_EVENT" -> {
                            boolean deletedOne = false;
                            if (action.getArgs().containsKey("event_id")) {
                                int id = (int) action.getArgs().get("event_id");
                                deletedOne = eventService.removeEvent(id);
                            } else if (action.getArgs().containsKey("title")) {
                                String title = (String) action.getArgs().get("title");
                                deletedOne = eventService.deleteByTitle(title);
                            }

                            if (deletedOne) {
                                deleted++;
                            } else {
                                systemResult.append("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán ƒë·ªÉ xo√°.\n");
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    systemResult.append("‚ùå L·ªói khi x·ª≠ l√Ω h√†nh ƒë·ªông: ").append(tool).append("\n");
                }
            }
        } else {
            System.out.println("Khong co hanh dong nao. Dang phan loai y dinh bang vector ...");

            ActionType intent = classifier.classifyIntent(userInput);

            switch (intent) {
                case PROMPT_FREE_TIME -> {
                    TimeContext context = TimeSlotUnit.extracTimeContext(userInput);
                    List<UserEvents> busytimes = eventService.getAllEvent();

                    List<UserEvents> filteredEvents;
                    switch (context) {
                        case TODAY ->
                            filteredEvents = TimeSlotUnit.filterEventsToday(busytimes);
                        case TOMORROW ->
                            filteredEvents = TimeSlotUnit.filterEventsTomorrow(busytimes);
                        case THIS_WEEK ->
                            filteredEvents = TimeSlotUnit.filterEventsThisWeek(busytimes);
                        case NEXT_WEEK ->
                            filteredEvents = TimeSlotUnit.filterEventsNextWeek(busytimes);
                        default ->
                            filteredEvents = busytimes;
                    }

                    List<TimeSlot> freeSlots = TimeSlotUnit.findFreeTime(filteredEvents);
                    systemResult.append("üìÜ C√°c kho·∫£ng th·ªùi gian r·∫£nh n√® hihi :\n");
                    for (TimeSlot slot : freeSlots) {
                        systemResult.append(" - ").append(slot.toString()).append("\n");
                    }
                }
                case PROMPT_SUMMARY_TIME -> {
                    try {
                        String summary = handleSummaryRequest(
                                userInput, // prompt ng∆∞·ªùi d√πng nh·∫≠p
                                embeddingService, // service ƒë·ªÉ l·∫•y vector embedding
                                eventService // service ƒë·ªÉ truy v·∫•n s·ª± ki·ªán trong kho·∫£ng th·ªùi gian
                        );
                        if (summary != null) {
                            return summary;
                        } else {
                            return "üìù M√¨nh kh√¥ng hi·ªÉu kho·∫£ng th·ªùi gian b·∫°n mu·ªën t·ªïng h·ª£p. B·∫°n c√≥ th·ªÉ h·ªèi ki·ªÉu nh∆∞: \"L·ªãch h√¥m nay\", \"S·ª± ki·ªán tu·∫ßn sau\"...";
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        return "‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu t·ªïng h·ª£p l·ªãch.";
                    }
                }
                case PROMPT_SEND_EMAIL -> {
                    Pattern pattern = Pattern.compile("tr∆∞·ªõc (\\d{1,3}) ?(ph√∫t|gi·ªù)");
                    matcher = pattern.matcher(userInput.toLowerCase());
                    if (matcher.find()) {
                        int value = Integer.parseInt(matcher.group(1));
                        String unit = matcher.group(2);

                        int remindMinutes = unit.equals("gi·ªù") ? value * 60 : value;
                        // T·∫°o nh·∫Øc nh·ªü
                        UserEvents upcoming = emailReminderDAO.getNextUpcomingEventByEventId(recentEvent.getIdEvent());
                        if (upcoming != null) {
                            emailReminderDAO.saveEmailReminder(upcoming.getIdEvent(), remindMinutes);
                            return "‚úÖ T√¥i s·∫Ω g·ª≠i email nh·∫Øc b·∫°n tr∆∞·ªõc " + remindMinutes + " ph√∫t khi s·ª± ki·ªán b·∫Øt ƒë·∫ßu.";
                        }
                    }
                }

            } // ‚úÖ Tr·∫£ k·∫øt qu·∫£ ƒë·∫ßy ƒë·ªß: ph·∫£n h·ªìi c·ªßa AI + k·∫øt qu·∫£ h·ªá th·ªën
        }
        if (!systemResult.isEmpty()) {
            conversationHistory.add(new Message("system", systemResult.toString()));

            // ‚õ≥Ô∏è PHA 2: G·ªçi l·∫°i AI ƒë·ªÉ ph·∫£n h·ªìi ph√π h·ª£p v·ªõi tr·∫°ng th√°i h·ªá th·ªëng
            String clarifiedResponse = llm.generateResponse(conversationHistory);
            conversationHistory.add(new Message("assistant", clarifiedResponse));
            return clarifiedResponse + "\n\n" + systemResult.toString().trim();
        }

// ‚úÖ N·∫øu m·ªçi th·ª© OK, tr·∫£ v·ªÅ ph·∫£n h·ªìi ban ƒë·∫ßu + k·∫øt qu·∫£ x·ª≠ l√Ω
        conversationHistory.add(new Message("assistant", userVisibleText));
        return userVisibleText;
    }

    public static List<Action> tryParseActions(String jsonPart) {
        try {
            if (jsonPart == null || jsonPart.isEmpty()) {
                return Collections.emptyList();
            }
            ObjectMapper objectMapper = new ObjectMapper();
            List<Action> list = Arrays.asList(objectMapper.readValue(jsonPart, Action[].class));
            System.out.println("‚úÖ Parsed " + list.size() + " action(s).");
            return list;
        } catch (Exception e) {
            System.out.println("‚ùå Kh√¥ng th·ªÉ parse Action(s): " + e.getMessage());
            System.out.println("üìÑ JSON:\n" + jsonPart);
            return Collections.emptyList();
        }
    }

    public String getGreeting() {
        List<Message> greetingMessages = new ArrayList<>();
        greetingMessages.add(conversationHistory.get(0));
        greetingMessages.add(new Message("user", "Xin ch√†o, t√¥i c·∫ßn t∆∞ v·∫•n qu·∫£n l√Ω l·ªãch tr√¨nh"));

        try {
            return llm.generateResponse(greetingMessages);
        } catch (Exception e) {
            return "ü§ñ Xin ch√†o! T√¥i l√† AI Assistant qu·∫£n l√Ω l·ªãch tr√¨nh th√¥ng minh.\n"
                    + "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n"
                    + "‚úÖ T·∫°o l·ªãch h·ªçc t·∫≠p, c√¥ng vi·ªác, s·ª± ki·ªán\n"
                    + "‚úÖ T·ªëi ∆∞u h√≥a th·ªùi gian\n"
                    + "‚úÖ ƒê∆∞a ra l·ªùi khuy√™n qu·∫£n l√Ω th·ªùi gian\n\n"
                    + "H√£y chia s·∫ª k·∫ø ho·∫°ch c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu!";
        }
    }

    public boolean shouldEndConversation(String userInput) {
        String input = userInput.toLowerCase().trim();
        return input.equals("bye") || input.equals("t·∫°m bi·ªát")
                || input.equals("k·∫øt th√∫c") || input.equals("quit")
                || input.equals("exit") || input.equals("end");
    }

    public String getConversationSummary() {
        if (conversationHistory.size() <= 1) {
            return "Kh√¥ng c√≥ cu·ªôc tr√≤ chuy·ªán n√†o ƒë∆∞·ª£c ghi nh·∫≠n.";
        }

        StringBuilder summary = new StringBuilder("üìå T√ìM T·∫ÆT CU·ªòC TR√í CHUY·ªÜN:\n");
        for (Message msg : conversationHistory) {
            summary.append(msg.getRole().equals("user") ? "üßë‚Äçüíª B·∫°n: " : "ü§ñ AI: ")
                    .append(msg.getContent()).append("\n");
        }
        return summary.toString();
    }

    public List<ScheduleItem> getCurrentSchedule() {

        EventService eventService = new EventService();
        List<UserEvents> userEvents = eventService.getAllEvent();
        List<ScheduleItem> schedules = new ArrayList<>();

        for (UserEvents event : userEvents) {
            String name = event.getName();
            LocalDateTime start = event.getStartDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
            LocalDateTime end = event.getDueDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();

            ScheduleItem item = new ScheduleItem(name, start, end, null);

            // ∆Øu ti√™n ho·∫∑c m√†u c√≥ th·ªÉ x√°c ƒë·ªãnh priority
            item.setPriority("Normal");

            // N·∫øu b·∫°n d√πng Enum ScheduleType th√¨ g√°n lu√¥n:
            item.setScheduleType(ScheduleItem.ScheduleType.EVENT);

            schedules.add(item);
        }

        return schedules;
    }

    private LocalDateTime tryParseDateTime(String input) {
        List<String> patterns = List.of(
                "yyyy-MM-dd'T'HH:mm",
                "yyyy-MM-dd HH:mm",
                "dd/MM/yyyy HH:mm",
                "dd-MM-yyyy HH:mm"
        );

        for (String pattern : patterns) {
            try {
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern(pattern);
                return LocalDateTime.parse(input, formatter);
            } catch (Exception ignored) {
            }
        }

        throw new IllegalArgumentException("‚ùå Kh√¥ng th·ªÉ parse ng√†y gi·ªù: " + input);
    }

    public String checkFreeTimes(String userInputs, EmbeddingService embeddingService) throws Exception {
        EventService eventService = new EventService();
        List<String> freeTimeIntents = Arrays.asList(
                "G·ª£i √Ω khung gi·ªù h·ªçc m√¥n To√°n",
                "T√¥i mu·ªën bi·∫øt l√∫c n√†o r·∫£nh ƒë·ªÉ h·ªçc",
                "B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt th·ªùi gian tr·ªëng ƒë·ªÉ l√™n l·ªãch?",
                "T√¨m kho·∫£ng th·ªùi gian r·∫£nh trong tu·∫ßn",
                "L√™n l·ªãch h·ªçc ph√π h·ª£p gi√∫p t√¥i",
                "H√£y ƒë·ªÅ xu·∫•t gi·ªù h·ªçc h·ª£p l√Ω"
        );
        float[] inputVec = embeddingService.getEmbedding(userInputs);
        boolean isGetFreeTimeIntent = false;
        for (String example : freeTimeIntents) {
            float[] refVec = embeddingService.getEmbedding(example);
            if (embeddingService.cosineSimilarity(inputVec, refVec) > 0.82f) {
                isGetFreeTimeIntent = true;
                break;
            }
        }
        if (isGetFreeTimeIntent) {
            List<UserEvents> events = eventService.getAllEvent(); // Tim bang user_ID
            List<TimeSlot> freeSlots = TimeSlotUnit.findFreeTime(events);

            if (freeSlots.isEmpty()) {
                return "‚õî Hi·ªán b·∫°n kh√¥ng c√≥ kho·∫£ng th·ªùi gian tr·ªëng n√†o trong tu·∫ßn.";
            }
            StringBuilder response = new StringBuilder("üìÖ C√°c kho·∫£ng th·ªùi gian tr·ªëng g·ª£i √Ω:\n");
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEEE - dd/MM/yyyy HH:mm");

            for (TimeSlot slot : freeSlots) {
                response.append("‚Ä¢ ").append(slot.getStart().format(formatter))
                        .append(" ‚Üí ").append(slot.getEnd().format(formatter))
                        .append("\n");
            }
            return response.toString();
        }

        return null;
    }

    public String handleSummaryRequest(String userInputs, EmbeddingService embeddingService, EventService eventService) throws Exception {
        // X√°c ƒë·ªãnh kho·∫£ng th·ªùi gian
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime start = now;
        LocalDateTime end = now;
        String range = null;

        if (userInputs.contains("h√¥m nay")) {
            start = now.toLocalDate().atStartOfDay();
            end = start.plusDays(1);
            range = "h√¥m nay";
        } else if (userInputs.contains("ng√†y mai")) {
            start = now.plusDays(1).toLocalDate().atStartOfDay();
            end = start.plusDays(1);
            range = "ng√†y mai";
        } else if (userInputs.contains("tu·∫ßn n√†y")) {
            DayOfWeek dow = now.getDayOfWeek();
            start = now.minusDays(dow.getValue() - 1).toLocalDate().atStartOfDay(); // Monday
            end = start.plusDays(7);
            range = "tu·∫ßn n√†y";
        } else if (userInputs.contains("tu·∫ßn sau")) {
            DayOfWeek dow = now.getDayOfWeek();
            start = now.minusDays(dow.getValue() - 1).toLocalDate().atStartOfDay().plusWeeks(1);
            end = start.plusDays(7);
            range = "tu·∫ßn sau";
        }

        if (range == null) {
            return null;
        }

        List<UserEvents> events = eventService.getEventsBetween(start, end);
        if (events.isEmpty()) {
            return "üì≠ Kh√¥ng c√≥ s·ª± ki·ªán n√†o trong " + range + ".";
        }

        StringBuilder sb = new StringBuilder();
        sb.append("üìÜ S·ª± ki·ªán ").append(range).append(":\n");
        for (UserEvents e : events) {
            sb.append("‚Ä¢ ").append(e.getName())
                    .append(" üïí ").append(e.getStartDate()).append(" - ").append(e.getDueDate());
            if (e.getLocation() != null) {
                sb.append(" üìç ").append(e.getLocation());
            }
            sb.append("\n");
        }
        return sb.toString();
    }

}
